name: Pull request

on:
  pull_request:

jobs:
  build:
    name: Pull request (Debian ${{ matrix.debian-version }} ${{ matrix.arch }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        debian-version:
          - 6
        arch:
          - x86
          - x86_64
        include:
          - arch: x86
            debian-image: i386/debian
          - arch: x86_64
            debian-image: debian
          - debian-version: 6
            debian-name: squeeze
        exclude:
            # There's no x86 image of Debian Squeeze
          - debian-version: 6
            arch: x86

    container:
      image: ${{ matrix.debian-image }}:${{ matrix.debian-version }}

    steps:
      - name: Install dependencies
        continue-on-error: true
        run: |
          # Don't abort the step if apt returns a non-zero status
          set +e

          # Ignore KEYEXPIRED errors
          mkdir -p /etc/apt/apt.conf.d/
          # `AllowUnauthenticated` only makes sense since APT 1.1.
          # Before that, `--force-yes` should be used.
          echo 'APT::Get::AllowUnauthenticated "true";'                >>/etc/apt/apt.conf.d/99allow-unauthenticated
          echo 'Acquire::AllowInsecureRepositories "true";'            >>/etc/apt/apt.conf.d/99allow-unauthenticated
          echo 'Acquire::AllowDowngradeToInsecureRepositories "true";' >>/etc/apt/apt.conf.d/99allow-unauthenticated
          echo 'Acquire::Check-Valid-Until "false";'                    >>/etc/apt/apt.conf.d/99allow-unauthenticated

          mkdir -p /etc/apt/
          echo 'deb [ trusted=yes,allow-insecure=yes ] http://archive.debian.org/debian ${{ matrix.debian-name }} main contrib non-free' >>/etc/apt/sources.list

          apt-get --version
          apt-get --yes update
          apt-get --yes upgrade
          apt-get --yes install dpkg-dev
        shell: bash

      - name: uname -a
        run: |
          cat /etc/issue
          cat /etc/debian_version
          uname -a
          dpkg-architecture
        shell: bash

      - run: |
          echo "GITHUB_ACTOR = ${GITHUB_ACTOR}"
          echo "GITHUB_REF = ${GITHUB_REF}"
          echo "GITHUB_REF_TYPE = ${GITHUB_REF_TYPE}"
          echo "GITHUB_SHA = ${GITHUB_SHA}"
          echo "GITHUB_TRIGGERING_ACTOR = ${GITHUB_TRIGGERING_ACTOR}"
          echo "GITHUB_EVENT_NAME = ${GITHUB_EVENT_NAME}"
          echo 'github.actor = ${{ github.actor }}'
          echo 'github.ref = ${{ github.ref }}'
          echo 'github.ref_type = ${{ github.ref_type }}'
          echo 'github.sha = ${{ github.sha }}'
          echo 'github.triggering_actor = ${{ github.triggering_actor }}'
          echo 'github.event_name = ${{ github.event_name }}'
        shell: bash

      - name: Publish
        id: publish
        if: ${{ github.event_name == 'push' && github.ref_type == 'branch' && github.ref == 'refs/heads/master' }}
        run: |
          echo 'Publishing...'
        shell: bash
